@page "/arr/sonarr"
@using System.Text.Json.Nodes
@using WindowsServerManager.Libraries.ArrSuite.Sonarr

<DashLayout>
    <MudStack>
        <MudExpansionPanel Style="border: #ffffff; border: rgba(255, 255, 255, .1); border-width: .2px; border-style: solid" Expanded="true" Dense="true">
            <TitleContent>
                <MudText><i class="fa-solid fa-rectangle-list"></i>Statistics</MudText>
            </TitleContent>
            <ChildContent>
                <Loader LoadingBool="@_loading" LoadingText="Loading Stats...">
                    <MudPaper Class="ma-2 pa-2">
                        <MudGrid Justify="Justify.Center">  
                            <MudItem xs="3">
                                <MudStack Spacing="1" AlignItems="AlignItems.Center" Justify="Justify.Center">
                                    <MudText Typo="Typo.h5" Color="Color.Primary">Missing</MudText>
                                    <MudText Typo="Typo.h6">@_missing</MudText>
                                </MudStack>
                            </MudItem>  
                            <MudItem xs="3">
                                <MudStack Spacing="1" AlignItems="AlignItems.Center" Justify="Justify.Center">
                                    <MudText Typo="Typo.h5" Color="Color.Primary">Downloading</MudText>
                                    <MudText Typo="Typo.h6">@_downloading</MudText>
                                </MudStack>
                            </MudItem>
                            <MudItem xs="3">
                                <MudStack Spacing="1" AlignItems="AlignItems.Center" Justify="Justify.Center">
                                    <MudText Typo="Typo.h5" Color="Color.Primary">Total Series</MudText>
                                    <MudText Typo="Typo.h6">@_series</MudText>
                                </MudStack>
                            </MudItem>
                            <MudItem xs="3">
                                <MudStack Spacing="1" AlignItems="AlignItems.Center" Justify="Justify.Center">
                                    <MudText Typo="Typo.h5" Color="Color.Primary">Total Episodes</MudText>
                                    <MudText Typo="Typo.h6">@_episodes</MudText>
                                </MudStack>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </Loader>
            </ChildContent>
        </MudExpansionPanel>
        <div style="width:100%; height: 90vh; overflow: auto; border: 1px solid rgba(255,255,255,0.1);">
            <iframe src="@_sonarrUrl" allowfullscreen sandbox="allow-forms allow-modals allow-popups allow-same-origin allow-scripts" style="width:100%; height:100%;"></iframe>
        </div>
    </MudStack>
</DashLayout>
@code {

    private readonly string _sonarrUrl = Environment.GetEnvironmentVariable("SONARR_URL") ?? "";
    private readonly string _sonarrApi = Environment.GetEnvironmentVariable("SONARR_API") ?? "";

    private bool _loading = true;

    private int _missing;
    private int _downloading;
    private int _series;
    private int _episodes;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        List<SonarrRoot>? seriesData = await Program.HttpClient.GetFromJsonAsync<List<SonarrRoot>>($"{_sonarrUrl}api/v3/series?apikey={_sonarrApi}");
        _series = seriesData?.Count ?? 0;
        if (seriesData is not null)
        {
            for (int index = seriesData.Count - 1; index >= 0; index--)
            {
                SonarrRoot series = seriesData[index];
                foreach (Season season in series.Seasons)
                {
                    _episodes += season.Statistics.EpisodeFileCount ?? 0;
                }
            }
        }

        JsonNode? missingData = await Program.HttpClient.GetFromJsonAsync<JsonNode>($"{_sonarrUrl}api/v3/wanted/missing?apikey={_sonarrApi}");
        _missing = int.Parse(missingData?["totalRecords"]?.ToString()?? "0");

        JsonNode? downloadingData = await Program.HttpClient.GetFromJsonAsync<JsonNode>($"{_sonarrUrl}api/v3/queue?apikey={_sonarrApi}");
        _downloading = int.Parse(downloadingData?["totalRecords"]?.ToString() ?? "0");

        _loading = false;

        await InvokeAsync(StateHasChanged);

        await base.OnAfterRenderAsync(firstRender);
    }

}