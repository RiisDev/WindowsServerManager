@page "/update/software"
@using WindowsServerManager.Libraries.Services.ExternalService

<DashLayout>
    <Loader LoadingText="Looking for updates..." LoadingBool="_loading">
        <MudTable Items="@_programs" Hover="true" SortLabel="Sort by" Dense="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">@($"Updates Available: {_programs?.Count ?? 0}")</MudText>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Program Name</MudTh>
                <MudTh>Current Version</MudTh>
                <MudTh>New Version</MudTh>
                <MudTh>Download Url</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Program Name"><MudText Color="Color.Default">@context.Name</MudText></MudTd>
                <MudTd DataLabel="Current Version"><MudText Color="Color.Warning">@context.CurrentVersion</MudText></MudTd>
                <MudTd DataLabel="New Version"><MudText Color="Color.Success">@context.NewVersion</MudText></MudTd>
                <MudTd DataLabel="Download Url"><MudLink Color="Color.Surface" Href="@context.Download">@context.Download</MudLink></MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager/>
            </PagerContent>
        </MudTable>
    </Loader>
</DashLayout>

@code {
    private bool _loading = true;

    public SoftwareUpdaterService BackgroundUpdater = Program.SoftwareUpdaterService;

    List<SoftwareUpdaterService.ProgramUpdate>? _programs = [];

    protected override Task OnInitializedAsync()
    {
        if (BackgroundUpdater.ProgramUpdates is not null)
            _programs = BackgroundUpdater.ProgramUpdates;

        return base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) base.OnAfterRenderAsync(firstRender);

        _loading = BackgroundUpdater.Running;
        _programs = BackgroundUpdater.ProgramUpdates ?? [];

        InvokeAsync(StateHasChanged);

        return base.OnAfterRenderAsync(firstRender);
    }

}
