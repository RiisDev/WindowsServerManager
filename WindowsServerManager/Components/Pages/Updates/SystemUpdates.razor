@page "/update/system"
@using WindowsServerManager.Libraries.Services

<DashLayout>
    <Loader LoadingText="Looking for updates..." LoadingBool="_loading">
        <MudTable Items="@_updates" Hover="true" SortLabel="Sort by" Dense="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">@($"Updates Available: {_updates?.Count ?? 0}")</MudText>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Update Name</MudTh>
                <MudTh>Update Id</MudTh>
                <MudTh>Severity</MudTh>
                <MudTh>Mandatory</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Update Name">@context.Name</MudTd>
                <MudTd DataLabel="Update Id">@context.UpdateId</MudTd>
                <MudTd DataLabel="Severity">@context.Severity</MudTd>
                <MudTd DataLabel="Mandatory">@context.Mandatory</MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </Loader>
</DashLayout>

@code {
    private bool _loading = true;

    [CascadingParameter] private UpdaterService BackgroundUpdater { get; set; } = default!;

    List<UpdaterService.SystemUpdate>? _updates = [];

    protected override Task OnInitializedAsync()
    {
        if (BackgroundUpdater.SystemUpdates is not null)
            _updates = BackgroundUpdater.SystemUpdates;

        return base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) base.OnAfterRenderAsync(firstRender);

        _loading = BackgroundUpdater.Running;
        _updates = BackgroundUpdater.SystemUpdates ?? [];

        InvokeAsync(StateHasChanged);

        return base.OnAfterRenderAsync(firstRender);
    }
}
