<MudNavGroup Style="@Style" Ripple="@Ripple" Disabled="@Disabled" HideExpandIcon="true" @bind-Expanded="_expanded">
    <TitleContent>
        <svg role="img" xmlns="http://www.w3.org/2000/svg" transform="@(_expanded ? TransformData : ExpandTransformData)" width="@IconSize" height="@IconSize" viewBox="@ViewBox">
            @if (string.IsNullOrEmpty(ExpandedIcon) && _expanded)
            {
                @((MarkupString)Icon)
            }
            else if (!string.IsNullOrEmpty(ExpandedIcon)&& _expanded)
            {
                @((MarkupString)ExpandedIcon)
            }
            else
            {
                @((MarkupString)Icon)
            }
        </svg>
        @Title
    </TitleContent>
    <ChildContent> 
        @ChildContent 
    </ChildContent>
</MudNavGroup>

@code{
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public string Icon { get; set; } = "";
    [Parameter] public string? ExpandedIcon { get; set; } = "";
    [Parameter] public string? Style { get; set; } = "";
    [Parameter] public string? TransformData { get; set; } = "";
    [Parameter] public string? ExpandTransformData { get; set; } = "";
    [Parameter] public int? IconSize { get; set; } = 24;
    [Parameter] public string? ViewBox { get; set; } = "0 0 24 24";

    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool Ripple { get; set; } = true;

    [Parameter] public RenderFragment? ChildContent { get; set; }

    private bool _expanded = true;
    
    private EventCallback<bool> ChangeIcon => EventCallback.Factory.Create<bool>(this, value => { _expanded = value; InvokeAsync(StateHasChanged); });
}