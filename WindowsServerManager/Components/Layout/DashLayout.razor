@using System.Text.Json
@using ABI.Windows.Foundation
@using WindowsServerManager.Libraries.NotificationClients
@using WindowsServerManager.Libraries.Services
@using WindowsServerManager.Libraries.Win32
@inject ISnackbar SnackBar
@* @inject  *@

<MudLayout>
    <MudAppBar Dense="true">
        <MudText Typo="Typo.h5" Class="ml-3">Server Manager</MudText>
        <MudSpacer />
        <MudStack Row="true" Spacing="1">

            <MudButton Variant="Variant.Filled" Size="Size.Small">Restart Manager</MudButton>
            <MudButton Variant="Variant.Filled" Size="Size.Small">Shutdown Manager</MudButton>
        </MudStack>
    </MudAppBar>
    <MudDrawer Open="true" ClipMode="DrawerClipMode.Always" Variant="DrawerVariant.Persistent" >
        <MudNavMenu Bordered="true">
            <MudText Typo="Typo.h6" Class="px-4">@(Environment.MachineName)</MudText>
            <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">Server Uptime: @_uptime</MudText>
            <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">Manager Uptime: @_appUptime</MudText>
            <MudDivider Class="my-2" />

            <MudNavLink ForceLoad="true" Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Dashboard">Dashboard</MudNavLink>
            @* <MudNavLink ForceLoad="true" Href="/shell" Icon="@Icons.Material.Filled.Terminal">Shell</MudNavLink> *@
            <MudNavLink ForceLoad="true" Href="/vnc" Icon="@Icons.Material.Filled.Terminal">VNC</MudNavLink>
            <MudNavLink ForceLoad="true" Href="/firewall" Icon="@Icons.Material.Filled.Security">Firewall</MudNavLink>
            <MudNavLink ForceLoad="true" Href="/system-stats" Icon="@Icons.Material.Filled.Notes">
                <MudBadge Bordered="true" Content="@(_bugChecks + _diskChecks)" Visible="@((_bugChecks + _diskChecks) > 0)" Color="Color.Primary" Origin="Origin.CenterRight">
                    System Warnings & Logs
                    &nbsp;
                </MudBadge>
            </MudNavLink>
            @if (_systemUpdateVisible || _softwareUpdateVisible)
            {
                <MudDivider Class="my-2" />
                <MudNavGroup Icon="@Icons.Material.Filled.BrowserUpdated" Title="Updates" Expanded="true">
                    @if (_systemUpdateVisible)
                    {
                        <MudNavLink ForceLoad="true" Href="/update/system" Icon="@Icons.Custom.Brands.MicrosoftWindows">
                            <MudBadge Bordered="true" Content="@_systemUpdates" Visible="@(_systemUpdates > 0)" Color="Color.Primary" Origin="Origin.CenterRight">
                                System
                                &nbsp;
                            </MudBadge>
                        </MudNavLink>
                    }
                    @if (_softwareUpdateVisible)
                    {

                        <MudNavLink ForceLoad="true" Href="/update/software" Icon="@Icons.Material.Filled.AccountTree">
                            <MudBadge Bordered="true" Content="@_programUpdates" Visible="@(_programUpdates > 0)" Color="Color.Primary" Origin="Origin.CenterRight">
                                Programs
                                &nbsp;
                            </MudBadge>
                        </MudNavLink>
                    }
                </MudNavGroup>
            }
            @if (_vmManagementVisible)
            {
                <MudDivider Class="my-2" />
                <MudNavGroup Icon="@Icons.Material.Filled.DevicesOther" Title="VM Management" Expanded="true">
                    @if (Program.Settings?.VmSettings.EnableHyperVManagement ?? false)
                    {
                        @* <MudNavLink ForceLoad="true" Href="/users" Icon="@Icons.Custom.Brands.Microsoft">Hyper-V VMs</MudNavLink> *@
                    }
                    @if (Program.Settings?.VmSettings.EnableDockerManagement ?? false)
                    {
                        @* <MudNavLink ForceLoad="true" Href="/vm/docker" Icon="@Icons.Custom.Brands.Linux">Docker Containers</MudNavLink> *@
                    }
                </MudNavGroup>
            }
            @if (_arrSuiteEnabled)
            {
                <MudDivider Class="my-2" />
                <MudNavGroup Icon="@Icons.Material.Filled.Sailing" Title="Arr Suite" Expanded="true">
                    @if (Program.Settings?.ArrSuite.Sonarr?.Enabled ?? false)
                    {
                        <MudNavLink ForceLoad="true" Icon="@Icons.Material.Filled.Tv" Href="/arr/sonarr">
                            Sonarr
                        </MudNavLink>
                    }
                    @if (Program.Settings?.ArrSuite.Radarr?.Enabled ?? false)
                    {
                        <MudNavLink ForceLoad="true" Icon="@Icons.Material.Filled.Movie" Href="/arr/radarr">
                            Radarr
                        </MudNavLink>
                    }
                    @if (Program.Settings?.ArrSuite.Prowlarr?.Enabled ?? false)
                    {
                        <MudNavLink ForceLoad="true" Icon="@Icons.Material.Filled.Api" Href="/arr/prowlarr">
                            Prowlarr
                        </MudNavLink>
                    }
                    @if (Program.Settings?.ArrSuite.Bazaar?.Enabled ?? false)
                    {
                        <MudNavLink ForceLoad="true" Icon="@Icons.Material.Filled.Subtitles" Href="/arr/bazarr">
                            Bazarr
                        </MudNavLink>
                    }
                    @if (Program.Settings?.ArrSuite.Whisparr?.Enabled ?? false)
                    {
                        <MudNavLink ForceLoad="true" Icon="@Icons.Material.Filled.Block" Href="/arr/whisparr">
                            Whisparr
                        </MudNavLink>
                    }
                    @if (Program.Settings?.ArrSuite.QBitTorrent?.Enabled ?? false)
                    {
                        <MudNavLink ForceLoad="true" Icon="@Icons.Material.Filled.CloudDownload" Href="/arr/qbittorrent">
                            QBittorrent
                        </MudNavLink>
                    }
                </MudNavGroup>
            }
            <MudDivider Class="my-2" />
            <MudNavLink ForceLoad="true" Href="/settings" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Settings">Settings</MudNavLink>

        </MudNavMenu>
    </MudDrawer>
    <MudMainContent >
        @ChildContent
    </MudMainContent>
</MudLayout>

@code
{
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    public UpdaterService BackgroundUpdater = Program.UpdaterService;
    public BugCheckService BugChecks = Program.BugCheckService;
    public DiskCheckService DiskChecks = Program.DiskCheckService;

    private string _uptime = "";
    private string _appUptime = "";

    private int _programUpdates = 0;
    private int _systemUpdates = 0;

    private int _bugChecks = 0;
    private int _diskChecks = 0;

    private bool _softwareUpdateVisible = (Program.Settings?.UpdateSettings.EnableSoftwareUpdateChecker ?? false);
    private bool _systemUpdateVisible = (Program.Settings?.UpdateSettings.EnableSystemUpdateChecker ?? false);
    private bool _vmManagementVisible = (Program.Settings?.VmSettings.EnableDockerManagement ?? false) || (Program.Settings?.VmSettings.EnableHyperVManagement ?? false);

    private bool _arrSuiteEnabled;

    private async Task CheckUpdates()
    {
        if (BackgroundUpdater.ProgramUpdates is not null && BackgroundUpdater.ProgramUpdates.Count > 0)
        {
            _programUpdates = BackgroundUpdater.ProgramUpdates.Count;
        }

        if (BackgroundUpdater.SystemUpdates is not null && BackgroundUpdater.SystemUpdates.Count > 0)
        {
            _systemUpdates = BackgroundUpdater.SystemUpdates.Count;
        }

        if (_programUpdates > 0 || _systemUpdates > 0)
        {
            if (_programUpdates == BackgroundUpdater.OldSoftCount && _systemUpdates == BackgroundUpdater.OldSysCount) return;

            bool found = false;
            
            foreach (NotificationClient.Notification notificationData in Program.NotificationClient.Notifications)
                if (notificationData.Text.Contains($" {_programUpdates} software updates, and {_systemUpdates}"))
                    found = true;

            if (!found)
            {
                NotificationClient.Notification notification = new(Severity.Normal, "Updates Found", $"Update checker has found {_programUpdates} software updates, and {_systemUpdates} system updates.", DateTime.Now);
                await InvokeAsync(() => Program.NotificationClient.DisplayNotification(notification, SnackBar));
                await Program.NotificationClient.Add(notification);
            }

            BackgroundUpdater.OldSoftCount = _programUpdates;
            BackgroundUpdater.OldSysCount = _systemUpdates;
        }
    }


    private async Task CheckSystemHealth()
    {
        if (BugChecks.BugChecks is not null && BugChecks.BugChecks.Count > 0)
        {
            _bugChecks = BugChecks.BugChecks.Count;
        }

        if (DiskChecks.DiskStats is not null && DiskChecks.DiskStats.Count > 0)
        {
            foreach (DiskCheckService.SmartData _ in DiskChecks.DiskStats.Where(data => !data.HealthStatus.Contains("Good")))
                _diskChecks++;
        }

        if (_bugChecks > 0)
        {
            foreach (BugCheckService.BugCheck bugCheck in BugChecks.BugChecks!)
            {
                bool exists = Program.NotificationClient.Notifications
                    .Any(notificationData =>
                        notificationData.Timestamp == bugCheck.Timestamp &&
                        notificationData.Text.Contains(bugCheck.Description) &&
                        notificationData.Title == "BugCheck Found");

                if (exists) continue;

                NotificationClient.Notification notification = new (
                    Severity.Warning,
                    "BugCheck Found",
                    $"System has detected a new BSOD, advise logs.\n\n{bugCheck.BsodType}\n{bugCheck.Description}",
                    bugCheck.Timestamp
                );

                Program.NotificationClient.DisplayNotification(notification, SnackBar);
                await Program.NotificationClient.Add(notification);
            }
        }

        if (_diskChecks > 0)
        {
            NotificationClient.Notification notification = new(Severity.Error, "Disk Error Found", "System has detected a drive failure warning, please advise logs.", DateTime.Now);
            Program.NotificationClient.DisplayNotification(notification, SnackBar);
            await Program.NotificationClient.Add(notification);
        }
    }

    protected override Task OnInitializedAsync()
    {
        _arrSuiteEnabled = JsonSerializer.Serialize(Program.Settings?.ArrSuite).Contains("Enabled\":true"); // Lazy method but easiest to check if any enabled

        try
        {
            Task.Run(async () =>
            {
                for (;;)
                {
                    TimeSpan appUptime = DateTime.Now - Program.StartTime;
                    TimeSpan upTimeSpan = TimeSpan.FromMilliseconds(Win32.GetTickCount64());
                    _uptime = $"{upTimeSpan.Days:D2}:{upTimeSpan.Hours:D2}:{upTimeSpan.Minutes:D2}:{upTimeSpan.Seconds:D2}";
                    _appUptime = $"{appUptime.Days:D2}:{appUptime.Hours:D2}:{appUptime.Minutes:D2}:{appUptime.Seconds:D2}";

                    await CheckUpdates();
                    await CheckSystemHealth();

                    await InvokeAsync(StateHasChanged);
                    await Task.Delay(1000);
                }
            });
        }
        catch (Exception ex)
        {
            Program.LogService.LogError(ex.ToString());
        }
        return base.OnInitializedAsync();
    }
}