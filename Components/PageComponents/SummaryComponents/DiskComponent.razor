@using WindowsServerManager.Components.Libraries.Win32

<Loader LoadingBool="@_loading" LoadingText="Loading Disks...">

    <MudPaper Class="mud-width-full py-4 mr-n5">
        <MudStack>
            @foreach (DriveInfo drive in driveActual)
            {
                <MudStack Class="mud-width-full">
                    <MudStack Row="true">
                        <MudText Typo="Typo.body2"><i class="fa-solid fa-hard-drive"></i>&nbsp;@drive.PhysicalName | @drive.SerialNumber | @drive.Drive:</MudText>
                        <MudSpacer/>
                        @drive.SizePercent - @drive.UsedSizeFormatted / @drive.TotalSizeFormatted - @(GetFreeSpace(drive.UsedBytes, drive.TotalBytes)) Free
                    </MudStack>
                    <MudProgressLinear Size="Size.Medium" Value="@(GetProgressPercent(drive.UsedBytes, drive.TotalBytes))" Color="Color.Primary" />
                </MudStack>
            }
        </MudStack>
    </MudPaper>
</Loader>
@code {
    private bool _loading = true;
    public List<DriveInfo> Drives;

    private List<DriveInfo> driveActual = [];

    private double GetDrivePercentage(ulong used, ulong total)
    {
        double usedDouble = used + .0;
        double totalDouble = total + .0;
        return (usedDouble / totalDouble);
    }

    private double GetProgressPercent(ulong used, ulong total)
    {
        double percent = GetDrivePercentage(used, total);
        return percent * 100;
    }

    private string GetFreeSpace(ulong used, ulong total) => GetSizeProper(total - used);

    private string GetSizeProper(ulong bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB", "PB", "EB" }; // Extendable for larger sizes
        double len = bytes;
        int order = 0;

        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len /= 1024;
        }

        return $"{len:0.##} {sizes[order]}";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        Task.Run( async () =>
        {
            Drives = DriveHandler.GetDriveSpace();

            foreach (DriveInfo drive in Drives)
            {
                drive.UsedSizeFormatted = GetSizeProper(drive.UsedBytes);
                drive.TotalSizeFormatted = GetSizeProper(drive.TotalBytes);

                double drivePercentage = GetDrivePercentage(drive.UsedBytes, drive.TotalBytes);
                drive.SizePercent = $"{drivePercentage:P2}";

                driveActual.Add(drive);
            }

            _loading = false;

            await InvokeAsync(StateHasChanged);

        });
        
        await base.OnAfterRenderAsync(firstRender);
    }
}
