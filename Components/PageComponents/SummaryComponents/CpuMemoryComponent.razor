@using WindowsServerManager.Components.Libraries.Win32
<MudPaper Class="mud-width-full py-4 mr-n5">
    <MudStack>
        <MudStack Class="mud-width-full">
            <MudStack Row="true">
                <MudText><i class="fa-solid fa-microchip"></i>&nbsp;CPU Usage</MudText>
                <MudSpacer/>
                @($"{_cpuStats.Usage:P2}")
            </MudStack>
            <MudProgressLinear Size="Size.Medium" Value="@(_cpuStats.Usage * 100)" Color="Color.Primary" />
        </MudStack>
        <MudStack Class="mud-width-full">
            <MudStack Row="true">
                <MudText><i class="fa-solid fa-memory"></i>&nbsp;RAM Usage</MudText>
                <MudSpacer />
                @(GetPercentString(_memoryStats.UsedMemory, _memoryStats.TotalMemory)) - @(GetSizeProper(_memoryStats.UsedMemory)) of @(GetSizeProper(_memoryStats.TotalMemory))
            </MudStack>
            <MudProgressLinear Size="Size.Medium" Value="GetProgressPercent(_memoryStats.UsedMemory, _memoryStats.TotalMemory)" Color="Color.Primary" />
        </MudStack>
    </MudStack>
</MudPaper>

@code {
    private CpuStats _cpuStats = CpuHandler.GetCpuStats();
    private MemoryInfo _memoryStats = MemoryHandler.GetMemoryUsage();

    private double GetPercentage(ulong used, ulong total)
    {
        double usedDouble = used + .0;
        double totalDouble = total + .0;
        return (usedDouble / totalDouble);
    }

    private double GetProgressPercent(ulong used, ulong total)
    {
        double percent = GetPercentage(used, total);
        return percent * 100;
    }

    private string GetFreeSpace(ulong used, ulong total) => GetSizeProper(total - used);

    private string GetSizeProper(ulong bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB", "PB", "EB" }; // Extendable for larger sizes
        double len = bytes;
        int order = 0;

        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len /= 1024;
        }

        return $"{len:0.##} {sizes[order]}";
    }

    private string GetPercentString(ulong used, ulong total) => $"{GetPercentage(used, total):P2}";

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        Task.Run(async () =>
        {
            await Task.Delay(1000);
            _cpuStats = CpuHandler.GetCpuStats();
            _memoryStats = MemoryHandler.GetMemoryUsage();
            await InvokeAsync(StateHasChanged);
        });
        return base.OnAfterRenderAsync(firstRender);
    }

}